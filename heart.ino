
#include <Adafruit_NeoPixel.h>
#include <HSBColor.h>

const uint16_t PROGMEM palette[] = {
  33808, 33840, 33872, 33904, 33969, 36049, 36081, 36146, 36178, 36210, 36242, 36275, 36339, 38419, 38451, 38484, 38516, 38548, 38581, 36533, 36565, 36597, 36630, 36630, 36662, 36694, 36695, 34647, 34679, 34679, 34679, 34712, 32664, 
  32664, 32664, 32665, 30617, 30585, 30585, 30585, 30553, 30554, 30554, 30522, 28442, 28442, 28410, 28378, 28347, 28347, 30363, 30331, 30299, 30267, 30235, 30203, 30139, 30107, 32123, 32091, 32060, 31996, 34012, 33980, 33916, 
  33884, 33852, 35868, 35804, 35772, 35740, 35676, 35643, 35611, 35547, 37563, 37531, 37499, 37467, 37403, 37371, 35291, 35259, 35227, 35194, 35162, 35162, 35130, 35098, 33018, 33018, 32985, 32953, 32953, 30905, 30873, 30873, 
  30872, 28792, 28792, 28792, 28791, 28791, 28791, 28823, 28823, 26774, 26806, 26806, 26806, 26837, 26869, 28917, 28949, 28980, 29012, 29012, 29043, 29075, 29107, 31187, 31218, 31250, 31314, 31346, 33425, 33457, 33489, 33552, 
  35632, 35664, 35728, 35759, 35791, 35823, 35886, 35918, 37998, 38061, 38093, 38125, 38189, 38220, 36204, 36236, 36268, 36331, 36363, 36395, 36426, 36458, 34442, 34474, 34473, 34505, 34537, 32521, 32520, 32552, 32584, 30536, 
  30536, 30567, 30567, 30567, 30599, 30598, 30598, 28550, 28550, 28550, 28518, 28517, 28517, 30533, 30533, 30533, 30501, 30469, 30468, 30436, 30404, 32420, 32420, 32388, 32356, 32324, 34340, 34308, 34276, 34212, 36227, 36195, 
  36163, 36131, 36067, 36035, 36003, 35939, 37955, 37923, 37891, 37827, 37796, 37764, 35652, 35620, 35588, 35524, 35492, 35460, 35428, 35396, 33284, 33252, 33221, 33189, 33157, 31077, 31045, 31045, 31013, 28934, 28902, 28902, 
  28870, 28838, 28838, 28839, 28807, 26759, 26759, 26728, 26728, 26728, 26728, 28776, 28777, 28809, 28809, 28809, 28842, 28842, 28842, 30922, 30955, 30955, 30987, 31020, 33100, 33100, 33132, 33165, 35245, 35277, 35309 }; 
  
const uint8_t PROGMEM gammaa[] = {
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  2,
    2,  3,  3,  3,  3,  3,  3,  3,  4,  4,  4,  4,  4,  5,  5,  5,
    5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  9,  9,  9, 10,
   10, 10, 11, 11, 11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 16, 16,
   17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 24, 24, 25,
   25, 26, 27, 27, 28, 29, 29, 30, 31, 32, 32, 33, 34, 35, 35, 36,
   37, 38, 39, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 50,
   51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68,
   69, 70, 72, 73, 74, 75, 77, 78, 79, 81, 82, 83, 85, 86, 87, 89,
   90, 92, 93, 95, 96, 98, 99,101,102,104,105,107,109,110,112,114,
  115,117,119,120,122,124,126,127,129,131,133,135,137,138,140,142,
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };
  
#define PIXEL_PIN    2    // Digital IO pin connected to the NeoPixels.

#define PIXEL_COUNT 27


int newColor[27][3];
int prevColor[27][3];
int tempCol[] = {0,0,0};
int location = 0;

Adafruit_NeoPixel strip = Adafruit_NeoPixel(PIXEL_COUNT, PIXEL_PIN, NEO_RGB + NEO_KHZ800);

void setup() {
  Serial.begin(9600);
  strip.begin();
  strip.show();
  
  randomSeed(analogRead(0));
  
  for(int i = 0;i<27;i++) {
    for(int j = 0;j<3;j++) {
      newColor[i][j] = 0;
      prevColor[i][j] = 0;
    } 
  }
}

unsigned long newrandom(unsigned long howsmall, unsigned long howbig)
{
  return howsmall + random() % (howbig - howsmall);
}

void loop()  { 
  design();
}

void randomColors(int wait) {
  
  for(int pixel = 0;pixel< PIXEL_COUNT;pixel++) {
    boolean done = true;
    for(int i =  0;i<3;i++) {
      if (newColor[pixel][i] != prevColor[pixel][i]) {
        done = false;
      }
    }
    
    if (done) {
      newColor[pixel][0] = newrandom(0,359);
      newColor[pixel][1] = newrandom(75,99);
      newColor[pixel][2] = newrandom(50,99);
    }
    
    H2R_HSBtoRGB(prevColor[pixel][0], prevColor[pixel][1], prevColor[pixel][2], tempCol);
    
    for(int i = 0;i<PIXEL_COUNT;i++) {
      strip.setPixelColor(pixel, pgm_read_byte(&gamma[tempCol[0]]), pgm_read_byte(&gamma[tempCol[1]]), pgm_read_byte(&gamma[tempCol[2]]));
    }
    strip.show();
  
    for(int i =  0;i<3;i++) {
      if (newColor[pixel][i] > prevColor[pixel][i]) {
        prevColor[pixel][i]++;
      } else if (newColor[pixel][i] < prevColor[pixel][i]) {
        prevColor[pixel][i]--;
      }
    }
  }
  
 
  delay(wait);
}

void design() { 
   uint16_t color;
  for(int t;t<2000;t++) {
    for(int x = 0;x < 240;x++) {
      for(int y = 0;y < 320;y++) {
        color = palette[((buffer[x][y] + t*57) % 256)];
        strip.setPixelColor(pixel, color);
      }
    }
  } 
}


